#!/bin/sh

#SET THE PATHS TO TOOLS WITHIN THE PIPELINE...
PATH=$PATH:$HOME/bin
export PATH=$ATACBIN/python/Python-2.7.11/:$PATH
export PYTHONPATH=$ATACBIN/python/Python-2.7.11
export PATH=$HOME/.local/bin:$PATH
export PATH=$ATACBIN/python/bin:$PATH
export PATH=$ATACBIN/FastQC:$PATH
export PATH=$ATACBIN/bowtie-1.0.0:$PATH
export PATH=$ATACBIN/samtools-0.1.18:$PATH
export PATH=$ATACBIN/bedtools2/bin:$PATH
export PATH=$ATACBIN/fseq/bin:$PATH
export PATH=$ATACBIN:$PATH
export PATH=$ATACBIN/ghostscript-9.20/bin:$PATH
export PATH=$ATACBIN/weblogo:$PATH
export PATH=$ATACBIN/homer/bin:$PATH
export PATH=$ATACBIN/ucsc_tools:$PATH
export PATH=$ATACBIN/symlinks:$PATH

#SET UP DATA LABLES...
RUN_NAME=""
RUN_DIRECTORY="" 
R1=""
R2=""
BOWTIE_REFERENCE=""
FASTA_REFERENCE=""
CHROM_SIZES=""
MACS2_GENOME_SIZE=""
URL_PREFIX=""
CLEAN_UP=FALSE

#SET UP OPTIONS...
echo
echo "Running ATAC-seq Pipeline version 1.0.1 started `date`"
echo "Settings:"
echo 
while getopts ":n:o:1:2:b:g:s:chm:u:" opt; do
  case $opt in
    n)
        echo "-n $OPTARG" >&2
        RUN_NAME=$OPTARG
        ;;
    o)
        echo "-o $OPTARG" >&2
        RUN_DIRECTORY=$OPTARG
        ;;
    1)
        echo "-1 $OPTARG" >&2
        R1=$OPTARG
        ;;
    2)
        echo "-2 $OPTARG" >&2
        R2=$OPTARG
        ;;
    b)
        echo "-b $OPTARG" >&2
        BOWTIE_REFERENCE=$OPTARG
        ;;
    g)
        echo "-g $OPTARG" >&2
        FASTA_REFERENCE=$OPTARG
        ;;
    s)
        echo "-s $OPTARG" >&2
        CHROM_SIZES=$OPTARG
        ;;
    m)
        echo "-m $OPTARG" >&2
        MACS2_GENOME_SIZE=$OPTARG
        ;;
    u)
        echo "-u $OPTARG" >&2
        URL_PREFIX=$OPTARG
        ;;
    C)
        echo "-C cleaning up intermediate files and directories (CLEAN_UP=TRUE)." >&2
        CLEAN_UP=TRUE
        ;;
    h)
        echo "ATAC Pipeline Usage:"
        echo
        echo "pipeline.sh -n run_name -o output_dir -1 r1.fastq -2 r2.fastq -b bowtie_index -g reference.fa -s chrom.sizes -C -m mm"
        echo    
        echo "-h help (this print out)" >&2
        echo "-n run name e.g. treatmentXYZ" >&2
        echo "-o output directory e.g. /path/myoutputdirectory" >&2
        echo "-1 fastq file containing read1 e.g. /path/R1.fastq" >&2
        echo "-2 fastq file containing read2 e.g. /path/R2.fastq" >&2
        echo "-b bowtie index e.g. /path/index (index must be the prefix only)" >&2
        echo "-g reference genome in fasta format e.g. /path/reference.fa (Note: thish should be the reference used to build the bowtie-index)" >&2
        echo "-s chromosome sizes e.g. /path/chrom.sizes" >&2
        echo "-C delete the intermediate files generated by the pipleline tools" >&2
        echo "-m macs2 prebuild genome size. Use either hs, mm, ce or dm where hs=2.7e9, mm=1.87e9, ce=9e7 and dm=1.2e8" >&2
        echo "-u url prefix" >&2
        exit 0
        ;;
    \?)
        echo "Invalid option: -$OPTARG" >&2
        exit 1
        ;;
    :)
        echo "Option -$OPTARG requires an argument." >&2
        exit 1
        ;;
    esac
done
echo
#START PROCESSING DATA...

#SET UP RUN DIRECTORY...
mkdir ${RUN_DIRECTORY} #make the run directory.
cd ${RUN_DIRECTORY} #move into the run directory.

#STEP 1 run fastQC
echo "STEP 1 - running FastQC"
mkdir ${RUN_DIRECTORY}/fastqc_results #make a sub-directory for the fastq results.
fastqc ${R1} ${R2} -o ${RUN_DIRECTORY}/fastqc_results
echo "done"
echo
wait

#STEP 2 (Trim reads to 30bp) not implimented as encode uses a script that isnt available on DCC. Mabe use trimomatic from I-ATAC pipeline.
echo "STEP 2 - not trimming reads"
echo
wait

#STEP 3 run alignment using bowtie
echo "STEP 3 - running bowtie"
mkdir ${RUN_DIRECTORY}/bowtie_results
bowtie --chunkmbs 1024 -y -v 2 -p 7 --best --strata -m 3 -k 1 --sam-nohead --sam ${BOWTIE_REFERENCE} -1 ${R1} -2 ${R2} > ${RUN_DIRECTORY}/bowtie_results/r1_r2_${RUN_NAME}.sam
echo "done"
echo
wait

#STEP 4a convert bowtie sam to bam
echo "STEP 4a - converting sam to bam"
samtools "view" -b -T ${FASTA_REFERENCE} -o ${RUN_DIRECTORY}/bowtie_results/r1_r2_${RUN_NAME}.sam.bam -S ${RUN_DIRECTORY}/bowtie_results/r1_r2_${RUN_NAME}.sam
echo "done"
echo
wait

#STEP 4b sort the bam
echo "STEP 4b - sorting the bam"
samtools "sort" ${RUN_DIRECTORY}/bowtie_results/r1_r2_${RUN_NAME}.sam.bam ${RUN_DIRECTORY}/bowtie_results/r1_r2_${RUN_NAME}.sam.bam.sorted
echo "done"
echo
wait

#STEP 4c count aligned reads in sorted bam (> "${RUN_DIRECTORY}/results/samtools_flagstat.txt")
echo "STEP 4c - counting reads"
samtools "flagstat" ${RUN_DIRECTORY}/bowtie_results/r1_r2_${RUN_NAME}.sam.bam.sorted.bam
echo "done"
echo
wait

# #STEP 5 (Sample 10M reads and compute “complexity”) not implimented as encode uses a script that isnt available on DCC.
echo "STEP 5 - sample 10M reads and compute complexity - not implimented"
echo
wait

#STEP 6 filter to mapped reads only
echo "STEP 6 - filtering to mapped reads only"
samtools "view" -b -F 4 -o ${RUN_DIRECTORY}/bowtie_results/r1_r2_${RUN_NAME}.sam.bam.sorted.filtered.bam ${RUN_DIRECTORY}/bowtie_results/r1_r2_${RUN_NAME}.sam.bam.sorted.bam
echo "done"
echo
wait

#STEP 7 - Filter out reads mapped to mitochondria
echo "STEP 7 - filter out reads mapping to mitochondria"
samtools "view" ${RUN_DIRECTORY}/bowtie_results/r1_r2_${RUN_NAME}.sam.bam.sorted.filtered.bam | egrep -v chrM | samtools "view" -bT $FASTA_REFERENCE - -o ${RUN_DIRECTORY}/bowtie_results/r1_r2_${RUN_NAME}.sam.bam.sorted.filtered.filtered_chrM.bam
echo "done"
echo
wait

#STEP 8 Convert processed bam to bed so formated for fseq peak caller
echo "STEP 8 - converting from bam to bed for use with fseq"
bedtools bamtobed -i ${RUN_DIRECTORY}/bowtie_results/r1_r2_${RUN_NAME}.sam.bam.sorted.filtered.filtered_chrM.bam > ${RUN_DIRECTORY}/bowtie_results/r1_r2_${RUN_NAME}.sam.bam.sorted.filtered.filtered_chrM.bam.bed
echo "done"
echo
wait

#STEP 9a Call nuclease accessible regions using FSeq - wiggle
echo "STEP 9a - calling regions using fseq - wiggle"
mkdir ${RUN_DIRECTORY}/fseq_in
cp ${RUN_DIRECTORY}/bowtie_results/r1_r2_${RUN_NAME}.sam.bam.sorted.filtered.filtered_chrM.bam.bed ${RUN_DIRECTORY}/fseq_in/r1_r2_${RUN_NAME}.sam.bam.sorted.filtered.filtered_chrM.bam.bed
mkdir ${RUN_DIRECTORY}/fseq_out_wiggle
fseq -v -of wig -f 0 -d ${RUN_DIRECTORY}/fseq_in -o ${RUN_DIRECTORY}/fseq_out_wiggle
echo "done"
echo
wait

#STEP 9b Call nuclease accessible regions using FSeq - regions (npf=narrow peak format)
echo "STEP 9b - calling regions using fseq - regions"
mkdir ${RUN_DIRECTORY}/fseq_out_regions
fseq -v -of npf -f 0 -d ${RUN_DIRECTORY}/fseq_in -o ${RUN_DIRECTORY}/fseq_out_regions
echo "done"
echo
wait

# #STEP 9c Concatenate outputs (cat files generated in step 9a - done in step 12), (cat files generated in step 9b) 
echo "STEP 9c - Concatenate outputs (cat files generated in step 9a), (cat files generated in step 9b) - not implimented here but in step 12"
echo

#STEP 10a Call nuclease accessible peaks using homer - set up.
echo "STEP 10a - Call nuclease accessible peaks using homer version 4.7 - making tag directory"
mkdir ${RUN_DIRECTORY}/homer
makeTagDirectory ${RUN_DIRECTORY}/homer ${RUN_DIRECTORY}/bowtie_results/r1_r2_${RUN_NAME}.sam -single
echo "done"
echo
wait

#STEP 10b Call nuclease accessible peaks using homer - peaks.
echo "STEP 10b - Call nuclease accessible peaks using homer version 4.7 - calling peaks"
findPeaks ${RUN_DIRECTORY}/homer -o "auto" -localSize 50000 -size 150 -minDist 50 -fragLength 0
echo "done"
echo
wait

#STEP 11 Finish peaks and region, changing formats and filtering (Format homer peaks to bed - cut wanted columns from table). A PERL SCRIPT SHOULD BE AVAILABLE IN DCC from ENCODE - but dosn't seem to be there.
#How to process homer peaks to use with UCSC Genome browser: http://homer.salk.edu/homer/ngs/peaks.html
echo "STEP 11 Formating homer peaks to bed."  
pos2bed.pl ${RUN_DIRECTORY}/homer/peaks.txt > ${RUN_DIRECTORY}/homer/${RUN_NAME}_UCSC_homer_peaks.txt.bed
gzip ${RUN_DIRECTORY}/homer/${RUN_NAME}_UCSC_homer_peaks.txt.bed
echo "done"
echo 
wait

#Extra step using MACS2
echo "STEP EXTRA - peak calling using macs2"
mkdir ${RUN_DIRECTORY}/macs2_pe
macs2 callpeak -t ${RUN_DIRECTORY}/bowtie_results/r1_r2_${RUN_NAME}.sam.bam -f BAMPE -g ${MACS2_GENOME_SIZE} -n ${RUN_NAME}_macs2_pe --outdir ${RUN_DIRECTORY}/macs2_pe -B --nomodel --shift -100 --extsize 200
gzip ${RUN_DIRECTORY}/macs2_pe/${RUN_NAME}_macs2_pe_summits.bed
gzip ${RUN_DIRECTORY}/macs2_pe/${RUN_NAME}_macs2_pe_peaks.narrowPeak
echo "done"
echo 
wait

#STEP 12 finish wiggles by combining wiggles per chromosome to one file and convert to bigwig
echo "STEP 12 - finish wiggles by combining wiggles per chromosome to one file and convert to bigwig"
cd ${RUN_DIRECTORY}/fseq_out_wiggle
cat $(ls -t) | grep -v track > cat_wiggles.wig
wigToBigWig cat_wiggles.wig ${CHROM_SIZES} ${RUN_NAME}_UCSC_fseq_wiggles.bw
cd ${RUN_DIRECTORY}/fseq_out_regions
cat $(ls -t) | grep -v track > cat_regions.npf
bedSort cat_regions.npf ${RUN_NAME}_UCSC_fseq_regions.sorted.npf
gzip ${RUN_NAME}_UCSC_fseq_regions.sorted.npf
echo "done"
echo 
wait

#STEP 13 Copy the results into the results directory.
echo "Placing results into $RUN_DIRECTORY/results"
mkdir ${RUN_DIRECTORY}/results
cp ${RUN_DIRECTORY}/bowtie_results/r1_r2_${RUN_NAME}.sam.bam.sorted.filtered.filtered_chrM.bam ${RUN_DIRECTORY}/results/
chmod 755 ${RUN_DIRECTORY}/results/r1_r2_${RUN_NAME}.sam.bam.sorted.filtered.filtered_chrM.bam

cp ${RUN_DIRECTORY}/fseq_out_wiggle/${RUN_NAME}_UCSC_fseq_wiggles.bw ${RUN_DIRECTORY}/results/
chmod 755 ${RUN_DIRECTORY}/results/${RUN_NAME}_UCSC_fseq_wiggles.bw

cp ${RUN_DIRECTORY}/fseq_out_regions/${RUN_NAME}_UCSC_fseq_regions.sorted.npf.gz ${RUN_DIRECTORY}/results/
chmod 755 ${RUN_DIRECTORY}/results/${RUN_NAME}_UCSC_fseq_regions.sorted.npf.gz

cp ${RUN_DIRECTORY}/homer/${RUN_NAME}_UCSC_homer_peaks.txt.bed.gz ${RUN_DIRECTORY}/results/
chmod 755 ${RUN_DIRECTORY}/results/${RUN_NAME}_UCSC_homer_peaks.txt.bed.gz

cp ${RUN_DIRECTORY}/macs2_pe/${RUN_NAME}_macs2_pe_control_lambda.bdg ${RUN_DIRECTORY}/results/
chmod 755 ${RUN_DIRECTORY}/results/${RUN_NAME}_macs2_pe_control_lambda.bdg

cp ${RUN_DIRECTORY}/macs2_pe/${RUN_NAME}_macs2_pe_peaks.xls ${RUN_DIRECTORY}/results/
chmod 755 ${RUN_DIRECTORY}/results/${RUN_NAME}_macs2_pe_peaks.xls

cp ${RUN_DIRECTORY}/macs2_pe/${RUN_NAME}_macs2_pe_treat_pileup.bdg ${RUN_DIRECTORY}/results/
chmod 755 ${RUN_DIRECTORY}/results/${RUN_NAME}_macs2_pe_treat_pileup.bdg

cp ${RUN_DIRECTORY}/macs2_pe/${RUN_NAME}_macs2_pe_peaks.narrowPeak.gz ${RUN_DIRECTORY}/results/
chmod 755 ${RUN_DIRECTORY}/results/${RUN_NAME}_macs2_pe_peaks.narrowPeak.gz

cp ${RUN_DIRECTORY}/macs2_pe/${RUN_NAME}_macs2_pe_summits.bed.gz ${RUN_DIRECTORY}/results/
chmod 755 ${RUN_DIRECTORY}/results/${RUN_NAME}_macs2_pe_summits.bed.gz
echo "done"
echo 

#STEP 14 Clean up the intermediate files.
if [ ${CLEAN_UP} = "TRUE" ]; then
	echo "Deleting intermediate directories..."
	cd ${RUN_DIRECTORY}
	rm -r ./bowtie_results
	rm -r ./fseq_in  
	rm -r ./fseq_out_regions  
	rm -r ./fseq_out_wiggle  
	rm -r ./homer    
	rm -r ./macs2_pe
	echo "done"
	echo 
fi

#STEP 15 Make html files for USCS Genome Browser...
if [ "$URL_PREFIX" != "" ]; then
	FSEQ_BW="track type=bigWig name=\"BigWig (fseq)\" description=\"A Graph of Data Wiggles\" bigDataUrl=http://leightonucsc.cmp.uea.ac.uk/${RUN_DIRECTORY}/results/${RUN_NAME}_UCSC_fseq_wiggles.bw"
	FSEQ_NP="track type=narrowPeak visibility=3 db=galGal5 name=\"nPk regions (fseq)\" description=\"fseq narrow peak regions for sample ${RUN_NAME}\""
	FSEQ_NP_URL="http://leightonucsc.cmp.uea.ac.uk/${RUN_DIRECTORY}/results/${RUN_NAME}_UCSC_fseq_regions.sorted.npf.gz"
	HOMER="track type=bed visibility=3 db=galGal5 name=\"peak calls (homer)\" description=\"Homer peak calls for sample ${RUN_NAME}\""
	HOMER_URL="http://leightonucsc.cmp.uea.ac.uk/${RUN_DIRECTORY}/results/${RUN_NAME}_UCSC_homer_peaks.txt.bed.gz"
	MACS2_NP="track type=narrowPeak visibility=3 db=galGal5 name=\"nPk regions (macs2)\" description=\"macs2 narrow peak regions for sample ${RUN_NAME}\""
	MACS2_NP_URL="http://leightonucsc.cmp.uea.ac.uk/${RUN_DIRECTORY}/results/${RUN_NAME}_macs2_pe_peaks.narrowPeak.gz"
	echo -e "${FSEQ_BW}\n${FSEQ_NP}\n${FSEQ_NP_URL}\n${HOMER}\n${HOMER_URL}\n${MACS2_NP}\n${MACS2_NP_URL}"
    echo
fi

#PIPELINE END
echo "Pipeline complete - `date`"
exit

#./ENCODE_ATAC_PIPELINE_svr4.sh -n PSM -o /scratch/atac_runs/PSM_WED -1 /scratch/leighton/atac_data/geoff_atac_data/JanReseq/GM_PSM/GM-PSM-1_S5_CAT_L001_L002_L003_L004_R1_001.fastq -2 /scratch/leighton/atac_data/geoff_atac_data/JanReseq/GM_PSM/GM-PSM-1_S5_CAT_L001_L002_L003_L004_R2_001.fastq -b /scratch/atac_bin/bowtie-1.0.0/indexes/galGal5 -g /scratch/atac_bin/bowtie-1.0.0/genomes/galGal5_chr1TO33_M_W_Z.fa -s /scratch/atac_bin/bowtie-1.0.0/genomes/galGal5.chrom.sizes -m mm -u http://leightonucsc.cmp.uea.ac.uk 2>&1 | tee /scratch/atac_runs/PSM_WED.log
